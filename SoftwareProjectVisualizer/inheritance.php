<?php

$className = $_POST["className"];
$classContent = "";

if(strcasecmp($className,"GameObject")==0){

	$classContent = "SourceCode: "."<br/>".
	"
function GameObject()"."<br/>"."
{"."<br/>"."
    /** Display depth order. A smaller zOrder means the element is rendered first, and therefor"."<br/>"."
        in the background."."<br/>"."
        @type Number"."<br/>"."
    */"."<br/>"."
    this.zOrder = 0;"."<br/>"."
    /**"."<br/>"."
        The position on the X axis"."<br/>"."
        @type Number"."<br/>"."
    */"."<br/>"."
    this.x = 0;"."<br/>"."
    /**"."<br/>"."
        The position on the Y axis"."<br/>"."
        @type Number"."<br/>"."
    */"."<br/>"."
    this.y = 0;"."<br/>"."
    "."<br/>"."
    /**"."<br/>"."
        Initialises the object, and adds it to the list of objects held by the GameObjectManager."."<br/>"."
        @param x        The position on the X axis"."<br/>"."
        @param y        The position on the Y axis"."<br/>"."
        @param z        The z order of the element (elements in the background have a lower z value)"."<br/>"."
    */"."<br/>"."
    this.startupGameObject = function(/**Number*/ x, /**Number*/ y, /**Number*/ z)"."<br/>"."
    {"."<br/>"."
        this.zOrder = z;"."<br/>"."
        this.x = x;"."<br/>"."
        this.y = y;"."<br/>"."
        g_GameObjectManager.addGameObject(this);"."<br/>"."
        return this;"."<br/>"."
    }"."<br/>"."
   "."<br/>"." 
    /**"."<br/>"."
        Cleans up the object, and removes it from the list of objects held by the GameObjectManager."."<br/>"."
    */"."<br/>"."
    this.shutdownGameObject = function()"."<br/>"."
    {"."<br/>"."
        g_GameObjectManager.removeGameObject(this);"."<br/>"."
    }"."<br/>"."
	"."<br/>"."
    this.shutdown = function()"."<br/>"."
    {"."<br/>"."
         this.shutdownGameObject();"."<br/>"."
    }"."<br/>"."
}"."<br/>"."";

} else if(strcasecmp($className,"VisualGameObject")==0){
	
	$classContent = "SourceCode: "."<br/>".
	"
function VisualGameObject()"."<br/>"."
{"."<br/>"."
    /**"."<br/>"."
        The image that will be displayed by this object"."<br/>"."
        @type Image"."<br/>"."
    */"."<br/>"."
    this.image = null;"."<br/>"."
    "."<br/>"."
    /**"."<br/>"."
        Draws this element to the back buffer"."<br/>"."
        @param dt Time in seconds since the last frame"."<br/>"."
		@param context The context to draw to"."<br/>"."
		@param xScroll The global scrolling value of the x axis"."<br/>"."  
		@param yScroll The global scrolling value of the y axis "."<br/>"."
    */"."<br/>"."
    this.draw = function(/**Number*/ dt, /**CanvasRenderingContext2D*/ context, /**Number*/ xScroll, /**Number*/ yScroll)"."<br/>"."
    {"."<br/>"."
        context.drawImage(this.image, this.x - xScroll, this.y - yScroll);"."<br/>"."
    }"."<br/>"."
    
    /**"."<br/>"."
        Initialises this object"."<br/>"."
        @param image The image to be displayed"."<br/>"."
		@param x The position on the X axis"."<br/>"."
        @param y The position on the Y axis"."<br/>"."
		@param z The depth"."<br/>"."
    */"."<br/>"."
    this.startupVisualGameObject = function(/**Image*/ image, /**Number*/ x, /**Number*/ y, /**Number*/ z)"."<br/>"."
    {"."<br/>"."
        this.startupGameObject(x, y, z);"."<br/>"."
        this.image = image;"."<br/>"."
        return this;"."<br/>"."
    }"."<br/>"."
    
    /**"."<br/>"."
        Clean this object up"."<br/>"."
    */"."<br/>"."
    this.shutdownVisualGameObject = function()"."<br/>"."
    {"."<br/>"."
        this.image = null;"."<br/>"."
        this.shutdownGameObject();"."<br/>"."
    }"."<br/>"."
	"."<br/>"."
    this.shutdown = function()"."<br/>"."
    {"."<br/>"."
        this.shutdownVisualGameObject();"."<br/>"."
    }"."<br/>"."
	"."<br/>"."
    this.collisionArea = function()"."<br/>"."
    {"."<br/>"."
        return new Rectangle().startupRectangle(this.x, this.y, this.image.width, this.image.height);"."<br/>"."
    }"."<br/>"."
}"."<br/>"."
VisualGameObject.prototype = new GameObject;"."<br/>"."";
	
} else if(strcasecmp($className,"MainMenu")==0){
	
	$classContent = "SourceCode: "."<br/>".
	"function MainMenu()"."<br/>"."
{"."<br/>"."
    this.startupMainMenu = function()"."<br/>"."
    {"."<br/>"."
        this.startupVisualGameObject(g_ResourceManager.mainmenu, 0, 0, 1);"."<br/>"."
        return this;"."<br/>"."
    }"."<br/>"."
	"."<br/>"."
    /**"."<br/>"."
        Called when a key is pressed"."<br/>"."
        @param event Event Object"."<br/>"."
    */"."<br/>"."
    this.keyDown = function(event)"."<br/>"."
    {"."<br/>"."
        g_ApplicationManager.startLevel();"."<br/>"."
    }"."<br/>"."
}"."<br/>"."
MainMenu.prototype = new VisualGameObject;"."<br/>"."";
	
} else if(strcasecmp($className,"AnimatedGameObject")==0){
	
	$classContent = "SourceCode: "."<br/>".
	"function AnimatedGameObject()"."<br/>"."
{"."<br/>"."
    /**"."<br/>"."
        Defines the current frame that is to be rendered"."<br/>"."
        @type Number"."<br/>"."
     */"."<br/>"."
    this.currentFrame = 0;"."<br/>"."
    /**"."<br/>"."
        Defines the frames per second of the animation"."<br/>"."
        @type Number"."<br/>"."
     */"."<br/>"."
    this.timeBetweenFrames = 0;"."<br/>"."
    /**"."<br/>"."
        The number of individual frames held in the image"."<br/>"."
        @type Number"."<br/>"."
     */"."<br/>"."
    /**"."<br/>"."
        Time until the next frame"."<br/>"."
        @type number"."<br/>"."
     */"."<br/>"."
    this.timeSinceLastFrame = 0;"."<br/>"."
    /**"."<br/>"."
        The width of each individual frame"."<br/>"."
        @type Number"."<br/>"."
     */"."<br/>"."
    this.frameWidth = 0;"."<br/>"."
"."<br/>"."
    /**"."<br/>"."
        Initialises this object"."<br/>"."
        @param image The image to be displayed"."<br/>"."
		@param x The position on the X axis"."<br/>"."
        @param y The position on the Y axis"."<br/>"."
		@param z The depth"."<br/>"."
        @param frameCount The number of animation frames in the image"."<br/>"."
        @param fps The frames per second to animate this object at"."<br/>"."
    */"."<br/>"."
    this.startupAnimatedGameObject = function(/**Image*/ image, /**Number*/ x, /**Number*/ y, /**Number*/ z, /**Number*/ frameCount, /**Number*/ fps)"."<br/>"."
    {"."<br/>"."
        if (frameCount <= 0) throw 'framecount can not be <= 0';"."<br/>"."
        if (fps <= 0) throw 'fps can not be <= 0'"."<br/>"."
"."<br/>"."
        this.startupVisualGameObject(image, x, y, z);"."<br/>"."
        this.currentFrame = 0;"."<br/>"."
        this.frameCount = frameCount;"."<br/>"."
        this.timeBetweenFrames = 1/fps;"."<br/>"."
        this.timeSinceLastFrame = this.timeBetweenFrames;"."<br/>"."
        this.frameWidth = this.image.width / this.frameCount;"."<br/>"."
"."<br/>"."
        return this;"."<br/>"."
    }"."<br/>"."
"."<br/>"."
    this.setAnimation = function(/**Image*/ image, /**Number*/ frameCount, /**Number*/ fps)"."<br/>"."
    {"."<br/>"."
        if (frameCount <= 0) throw 'framecount can not be <= 0';"."<br/>"."
        if (fps <= 0) throw 'fps can not be <= 0'"."<br/>"."
"."<br/>"."
        this.image = image;"."<br/>"."
        this.currentFrame = 0;"."<br/>"."
        this.frameCount = frameCount;"."<br/>"."
        this.timeBetweenFrames = 1/fps;"."<br/>"."
        this.timeSinceLastFrame = this.timeBetweenFrames;"."<br/>"."
        this.frameWidth = this.image.width / this.frameCount;"."<br/>"."
    }"."<br/>"."
"."<br/>"."
    /**"."<br/>"."
        Draws this element to the back buffer"."<br/>"."
        @param dt Time in seconds since the last frame"."<br/>"."
		@param context The context to draw to"."<br/>"."
		@param xScroll The global scrolling value of the x axis"."<br/>"."
		@param yScroll The global scrolling value of the y axis"."<br/>"."
    */"."<br/>"."
    this.draw = function(/**Number*/ dt, /**CanvasRenderingContext2D*/ context, /**Number*/ xScroll, /**Number*/ yScroll)"."<br/>"."
    {"."<br/>"."
        var sourceX = this.frameWidth * this.currentFrame;"."<br/>"."
        context.drawImage(this.image, sourceX, 0, this.frameWidth, this.image.height, this.x - xScroll, this.y - yScroll, this.frameWidth, this.image.height);"."<br/>"."
"."<br/>"."
        this.timeSinceLastFrame -= dt;"."<br/>"."
        if (this.timeSinceLastFrame <= 0)"."<br/>"."
        {"."<br/>"."
           this.timeSinceLastFrame = this.timeBetweenFrames;"."<br/>"."
           ++this.currentFrame;"."<br/>"."
           this.currentFrame %= this.frameCount;"."<br/>"."
        }"."<br/>"."
    }"."<br/>"."
"."<br/>"."
    this.shutdownAnimatedGameObject = function()"."<br/>"."
    {"."<br/>"."
        this.shutdownVisualGameObject();"."<br/>"."
    }"."<br/>"."
"."<br/>"."
    this.shutdown = function()"."<br/>"."
    {"."<br/>"."
        this.shutdownAnimatedGameObject();"."<br/>"."
    }"."<br/>"."
"."<br/>"."
    this.collisionArea = function()"."<br/>"."
    {"."<br/>"."
        return new Rectangle().startupRectangle(this.x, this.y, this.frameWidth, this.image.height);"."<br/>"."
    }"."<br/>"."
}"."<br/>"."
"."<br/>"."
AnimatedGameObject.prototype = new VisualGameObject;"."<br/>"."";
	
} else if(strcasecmp($className,"RepeatingGameObject")==0){
	
	$classContent = "SourceCode: "."<br/>".
	"function RepeatingGameObject()"."<br/>"."
{"."<br/>"."
    /** The width that the final image will take up"."<br/>"."
		@type Number"."<br/>"."
	*/"."<br/>"."
	this.width = 0;"."<br/>"."
	/** The height that the final image will take up"."<br/>"."
		@type Number"."<br/>"."
	*/"."<br/>"."
    this.height = 0;"."<br/>"."
	/** How much of the scrollX and scrollY to apply when drawing"."<br/>"."
		@type Number"."<br/>"."
	*/"."<br/>"."
    this.scrollFactor = 1;"."<br/>"."
	"."<br/>"."
    /**"."<br/>"."
        Initialises this object"."<br/>"."
        @return A reference to the initialised object"."<br/>"."
    */"."<br/>"."
    this.startupRepeatingGameObject = function(image, x, y, z, width, height, scrollFactor)"."<br/>"."
    {"."<br/>"."
        this.startupVisualGameObject(image, x, y, z);"."<br/>"."
        this.width = width;"."<br/>"."
        this.height = height;"."<br/>"."
        this.scrollFactor = scrollFactor;"."<br/>"."
        return this;"."<br/>"."
    }"."<br/>"."
	"."<br/>"."
    /**"."<br/>"."
        Clean this object up"."<br/>"."
    */"."<br/>"."
    this.shutdownstartupRepeatingGameObject = function()"."<br/>"."
    {"."<br/>"."
        this.shutdownVisualGameObject();"."<br/>"."
    }"."<br/>"."
    "."<br/>"."
	/**"."<br/>"."
        Draws this element to the back buffer"."<br/>"."
        @param dt Time in seconds since the last frame"."<br/>"."
		@param context The context to draw to"."<br/>"."
		@param xScroll The global scrolling value of the x axis"."<br/>"."
		@param yScroll The global scrolling value of the y axis"."<br/>"."
    */"."<br/>"."
    this.draw = function(dt, canvas, xScroll, yScroll)"."<br/>"."
    {"."<br/>"."
        var areaDrawn = [0, 0];"."<br/>"."
        "."<br/>"."
        for (var y = 0; y < this.height; y += areaDrawn[1])"."<br/>"."
        {"."<br/>"."
            for (var x = 0; x < this.width; x += areaDrawn[0])"."<br/>"."
            {"."<br/>"."
                // the top left corner to start drawing the next tile from"."<br/>"."
				var newPosition = [this.x + x, this.y + y];"."<br/>"."
				// the amount of space left in which to draw"."<br/>"."
                var newFillArea = [this.width - x, this.height - y];"."<br/>"."
				// the first time around you have to start drawing from the middle of the image"."<br/>"."
				// subsequent tiles alwyas get drawn from the top or left"."<br/>"."
                var newScrollPosition = [0, 0];"."<br/>"."
                if (x==0) newScrollPosition[0] = xScroll * this.scrollFactor;"."<br/>"."
                if (y==0) newScrollPosition[1] = yScroll * this.scrollFactor;"."<br/>"."
                areaDrawn = this.drawRepeat(canvas, newPosition, newFillArea, newScrollPosition);"."<br/>"."
            }"."<br/>"."
        }"."<br/>"."
    }"."<br/>"."
    "."<br/>"."
    this.drawRepeat = function(canvas, newPosition, newFillArea, newScrollPosition)"."<br/>"."
    {"."<br/>"."
        // find where in our repeating texture to start drawing (the top left corner)"."<br/>"."
        var xOffset = Math.abs(newScrollPosition[0]) % this.image.width;"."<br/>"."
        var yOffset = Math.abs(newScrollPosition[1]) % this.image.height;"."<br/>"."
        var left = newScrollPosition[0]<0?this.image.width-xOffset:xOffset;"."<br/>"."
        var top = newScrollPosition[1]<0?this.image.height-yOffset:yOffset;"."<br/>"."
        var width = newFillArea[0] < this.image.width-left?newFillArea[0]:this.image.width-left;"."<br/>"."
        var height = newFillArea[1] < this.image.height-top?newFillArea[1]:this.image.height-top;"."<br/>"."
        "."<br/>"."
        // draw the image"."<br/>"."
        canvas.drawImage(this.image, left, top, width, height, newPosition[0], newPosition[1], width, height);"."<br/>"."
        "."<br/>"."
        return [width, height];"."<br/>"."
    }"."<br/>"."
    "."<br/>"."
    "."<br/>"."
}"."<br/>"."
RepeatingGameObject.prototype = new VisualGameObject();"."<br/>"."";
	
} else if(strcasecmp($className,"Powerup")==0){
	
	$classContent = "SourceCode: "."<br/>".
	"function Powerup()"."<br/>"."
{"."<br/>"."
    /** The value of the powerup"."<br/>"."
        @type Number"."<br/>"."
     */"."<br/>"."
    this.value = 0;"."<br/>"."
    /** The current position on the sine wave"."<br/>"."
        @type Number"."<br/>"."
     */"."<br/>"."
    this.sineWavePos = 0;"."<br/>"."
    /** How quickly the powerup cycles through the sine wave"."<br/>"."
        @type Number"."<br/>"."
     */"."<br/>"."
    this.bounceTime = 1;"."<br/>"."
    /** The speed to increment the sineWavePos value at"."<br/>"."
        @type Number"."<br/>"."
     */"."<br/>"."
    this.bounceSpeed = Math.PI / this.bounceTime;"."<br/>"."
    /** The height of the powerups bounce"."<br/>"."
        @type Number"."<br/>"."
     */"."<br/>"."
    this.bounceHeight = 10;"."<br/>"."
"."<br/>"."
    /**"."<br/>"."
        Initialises this object"."<br/>"."
        @param value        The value (score) of this powerup"."<br/>"."
        @param image        The image to be displayed"."<br/>"."
        @param x            The position on the X axis"."<br/>"."
        @param y            The position on the Y axis"."<br/>"."
        @param z            The depth"."<br/>"."
        @param frameCount   The number of animation frames in the image"."<br/>"."
        @param fps          The frames per second to animate this object at"."<br/>"."
     */"."<br/>"."
    this.startupPowerup = function(/**Number*/ value, /**Image*/ image, /**Number*/ x, /**Number*/ y, /**Number*/ z, /**Number*/ frameCount, /**Number*/ fps)"."<br/>"."
    {"."<br/>"."
        this.startupAnimatedGameObject(image, x, y - this.bounceHeight, z, frameCount, fps);"."<br/>"."
        this.value = value;"."<br/>"."
        return this;"."<br/>"."
    }"."<br/>"."
"."<br/>"."
    this.shutdownPowerup = function()"."<br/>"."
    {"."<br/>"."
        this.shutdownAnimatedGameObject();"."<br/>"."
    }"."<br/>"."
"."<br/>"."
    this.shutdown = function()"."<br/>"."
    {"."<br/>"."
        this.shutdownPowerup();"."<br/>"."
    }"."<br/>"."
"."<br/>"."
    /**"."<br/>"."
        Updates the object"."<br/>"."
        @param dt The time since the last frame in seconds"."<br/>"."
        @param context The drawing context"."<br/>"."
        @param xScroll The global scrolling value of the x axis"."<br/>"."
        @param yScroll The global scrolling value of the y axis"."<br/>"."
    */"."<br/>"."
	this.update = function (/**Number*/ dt, /**CanvasRenderingContext2D*/context, /**Number*/ xScroll, /**Number*/ yScroll)"."<br/>"."
    {"."<br/>"."
        var lastSineWavePos = this.sineWavePos;"."<br/>"."
        this.sineWavePos += this.bounceSpeed * dt;"."<br/>"."
        this.y += (Math.sin(this.sineWavePos) - Math.sin(lastSineWavePos)) * this.bounceHeight;"."<br/>"."
"."<br/>"."
        if (this.collisionArea().intersects(g_player.collisionArea()))"."<br/>"."
        {"."<br/>"."
            this.shutdown();"."<br/>"."
            g_score += this.value;"."<br/>"."
            g_ApplicationManager.updateScore();"."<br/>"."
        }"."<br/>"."
    }"."<br/>"."
}"."<br/>"."

Powerup.prototype = new AnimatedGameObject;"."<br/>"."";
	
} else if(strcasecmp($className,"LevelEndPost")==0){
	
	$classContent = "SourceCode: "."<br/>".
	"function LevelEndPost()"."<br/>"."
{"."<br/>"."
"."<br/>"."
    this.startupLevelEndPost = function(/**Image*/ image, /**Number*/ x, /**Number*/ y, /**Number*/ z)"."<br/>"."
    {"."<br/>"."
        this.startupAnimatedGameObject(image, x, y, z, 4, 10);"."<br/>"."
        return this;"."<br/>"."
    }"."<br/>"."
"."<br/>"."
    this.shutdown = function()"."<br/>"."
    {"."<br/>"."
        this.shutdownLevelEndPost();"."<br/>"."
    }"."<br/>"."
"."<br/>"."
    this.shutdownLevelEndPost = function()"."<br/>"."
    {"."<br/>"."
        this.shutdownAnimatedGameObject();"."<br/>"."
    }"."<br/>"."
"."<br/>"."
    /**"."<br/>"."
        Updates the object"."<br/>"."
        @param dt The time since the last frame in seconds"."<br/>"."
        @param context The drawing context"."<br/>"."
        @param xScroll The global scrolling value of the x axis"."<br/>"."
        @param yScroll The global scrolling value of the y axis"."<br/>"."
    */"."<br/>"."
	this.update = function (/**Number*/ dt, /**CanvasRenderingContext2D*/context, /**Number*/ xScroll, /**Number*/ yScroll)"."<br/>"."
    {"."<br/>"."
        if (this.collisionArea().intersects(g_player.collisionArea()))"."<br/>"."
        {"."<br/>"."
            g_ApplicationManager.openMainMenu();"."<br/>"."
            this.shutdown();"."<br/>"."          
        }"."<br/>"."
    }"."<br/>"."
}"."<br/>"."
LevelEndPost.prototype = new AnimatedGameObject;"."<br/>"."";
	
} else if(strcasecmp($className,"Player")==0){
	
	$classContent = "SourceCode: "."<br/>".
	"function Player()"."<br/>"."
{"."<br/>"."
    /** The maximum height of the jump"."<br/>"."
        @type Number"."<br/>"."
     */"."<br/>"."
    this.jumpHeight = 64;"."<br/>"."
    /** The constant or half PI"."<br/>"."
        @type Number"."<br/>"."
     */"."<br/>"."
    this.halfPI = Math.PI / 2;"."<br/>"."
    /** The amount of time to spend in the air when jumping"."<br/>"."
        @type Number"."<br/>"."
     */"."<br/>"."
    this.jumpHangTime = 0.5;"."<br/>"."
    /** The speed to progress alone the sine wave that defines"."<br/>"."
        the jumping arc"."<br/>"."
        @type Number"."<br/>"."
     */"."<br/>"."
    this.jumpSinWaveSpeed = this.halfPI / this.jumpHangTime;"."<br/>"."
    /** The current position on the sine wave that defines the jump arc"."<br/>"."
        @type Number"."<br/>"."
     */"."<br/>"."
    this.jumpSinWavePos = 0;"."<br/>"."
    /** The rate to fall at"."<br/>"."
        @type Number"."<br/>"."
     */"."<br/>"."
    this.fallMultiplyer = 1.5;"."<br/>"."
    /** True when the player is on the ground, false otherwise"."<br/>"."
        @type Boolean"."<br/>"."
     */"."<br/>"."
    this.grounded = true;"."<br/>"."
    /** the players running speed"."<br/>"."
        @type Number"."<br/>"."
     */"."<br/>"."
    this.speed = 75;"."<br/>"."
    /** True if the player is moving left, false otherwise"."<br/>"."
        @type Boolean"."<br/>"."
     */"."<br/>"."
    this.left = false;"."<br/>"."
    /** True if the player is moving right, false otherwise"."<br/>"."
        @type Boolean"."<br/>"."
     */"."<br/>"."
    this.right = false;
    /** A reference to the level object"."<br/>"."
        @type Level"."<br/>"."
    */"."<br/>"."
    this.level = null;"."<br/>"."
    /** The distance between the player and the edge of the screen"."<br/>"."
        @type Number"."<br/>"."
     */"."<br/>"."
    this.screenBorder = 100;"."<br/>"."
"."<br/>"."
    /**"."<br/>"."
        Initialises this object"."<br/>"."
    */"."<br/>"."
    this.startupPlayer = function(level)"."<br/>"."
    {"."<br/>"."
        this.startupAnimatedGameObject(g_ResourceManager.idleLeft, 300, 400 - 48 - 48, 4, 6, 20);"."<br/>"."
        this.level = level;"."<br/>"."
        return this;"."<br/>"."
    }"."<br/>"."
"."<br/>"."
    /**"."<br/>"."
        Called when a key is pressed"."<br/>"."
        @param event Event Object"."<br/>"."
    */"."<br/>"."
    this.keyDown = function(event)"."<br/>"."
    {"."<br/>"."
        var updateRequired = false;"."<br/>"."
"."<br/>"."
        // left"."<br/>"."
        if (event.keyCode == 37 && !this.left)"."<br/>"."
        {"."<br/>"."
            this.left = true;"."<br/>"."
            updateRequired = true;"."<br/>"."
        }"."<br/>"."
        // right"."<br/>"."
        if (event.keyCode == 39 && !this.right)"."<br/>"."
        {"."<br/>"."
            this.right = true;"."<br/>"."
            updateRequired = true;"."<br/>"."
        }"."<br/>"."
        if (event.keyCode == 32 && this.grounded)"."<br/>"."
        {"."<br/>"."
            this.grounded = false;"."<br/>"."
            this.jumpSinWavePos = 0;"."<br/>"."
        }"."<br/>"."
"."<br/>"."
        if (updateRequired)"."<br/>"."
            this.updateAnimation();"."<br/>"."
"."<br/>"."
    }"."<br/>"."
"."<br/>"."
    /**"."<br/>"."
        Called when a key is pressed"."<br/>"."
        @param event Event Object"."<br/>"."
    */"."<br/>"."
    this.keyUp = function(event)"."<br/>"."
    {"."<br/>"."
        // left"."<br/>"."
        if (event.keyCode == 37)"."<br/>"."
        {"."<br/>"."
            this.left = false;"."<br/>"."
            this.setAnimation(g_ResourceManager.idleLeft, 6, 20);"."<br/>"."
        }"."<br/>"."
        // right"."<br/>"."
        if (event.keyCode == 39)"."<br/>"."
        {"."<br/>"."
            this.right = false;"."<br/>"."
            this.setAnimation(g_ResourceManager.idleRight, 6, 20"."<br/>"."
        }"."<br/>"."
"."<br/>"."
        this.updateAnimation();"."<br/>"."
    }"."<br/>"."
"."<br/>"."
    /**"."<br/>"."
        Updates the current animation depending on the movement"."<br/>"."
        of the player. This accounts for the fact that both"."<br/>"."
        the left and right arrow keys can be pressed at the"."<br/>"."
        same time."."<br/>"."
    */"."<br/>"."
    this.updateAnimation = function()"."<br/>"."
    {"."<br/>"."
       if (this.right && this.left)"."<br/>"."
            this.setAnimation(g_ResourceManager.idleLeft, 6, 20);"."<br/>"."
        else if (this.right)"."<br/>"."
            this.setAnimation(g_ResourceManager.runRight, 12, 20);"."<br/>"."
        else if (this.left)"."<br/>"."
            this.setAnimation(g_ResourceManager.runLeft, 12, 20);"."<br/>"."
    }"."<br/>"."
"."<br/>"."
    /**"."<br/>"."
        Updates the object"."<br/>"."
        @param dt The time since the last frame in seconds"."<br/>"."
        @param context The drawing context"."<br/>"."
        @param xScroll The global scrolling value of the x axis"."<br/>"."
        @param yScroll The global scrolling value of the y axis"."<br/>"."
    */"."<br/>"."
	this.update = function (/**Number*/ dt, /**CanvasRenderingContext2D*/context, /**Number*/ xScroll, /**Number*/ yScroll)"."<br/>"."
    {"."<br/>"."
        if (this.left)"."<br/>"."
            this.x -= this.speed * dt;"."<br/>"."
        if (this.right)"."<br/>"."
            this.x += this.speed * dt;"."<br/>"."
"."<br/>"."
        // XOR operation (JavaScript does not have a native XOR operator)"."<br/>"."
        // only test for a collision if the player is moving left or right (and not trying to do both at"."<br/>"."
        // the same time)"."<br/>"."
        if ((this.right || this.left) && !(this.left && this.right))"."<br/>"."
        {"."<br/>"."
            // this will be true until the player is no longer colliding"."<br/>"."
            var collision = false;"."<br/>"."
            // the player may have to be pushed back through several block stacks (especially if the"."<br/>"."
            // frame rate is very slow)"."<br/>"."
            do"."<br/>"."
            {"."<br/>"."
                // the current position of the player (test the left side if running left"."<br/>"."
                // and the right side if running right)"."<br/>"."
                var xPos = this.left ? this.x : this.x + this.frameWidth;"."<br/>"."
                // the index of stack of blocks that the player is standing on/in"."<br/>"."
                var currentBlock = this.level.currentBlock(xPos);"."<br/>"."
                // the height of the stack of blocks that the player is standing on/in"."<br/>"."
                var groundHeight = this.level.groundHeight(currentBlock);"."<br/>"."
                // the height of the player (we need the height from the ground up,"."<br/>"."
                // whereas the this.y value represents the position of the player"."<br/>"."
                // from the \"sky\" down)."."<br/>"."
                var playerHeight = context.canvas.height - (this.y + this.image.height);"."<br/>"."
                // if the player is not higher than the stack of blocks, it must be colliding"."<br/>"."
                if (playerHeight  < groundHeight)"."<br/>"."
                {"."<br/>"."
                    collision = true;"."<br/>"."
                    // we are moving right, so push the player left"."<br/>"."
                    if (this.right)"."<br/>"."
                        this.x = this.level.blockWidth * currentBlock - this.frameWidth - 1;"."<br/>"."
                    // we are moving left, push the player right"."<br/>"."
                    else"."<br/>"."
                        this.x = this.level.blockWidth * (currentBlock + 1);"."<br/>"."
                }"."<br/>"."
                else"."<br/>"."
                {"."<br/>"."
                    collision = false;"."<br/>"."
                }"."<br/>"."
            }  while (collision)"."<br/>"."
        }"."<br/>"."
"."<br/>"."
        // keep the player bound to the level"."<br/>"."
        if (this.x > this.level.blocks.length * this.level.blockWidth - this.frameWidth - 1)"."<br/>"."
            this.x = this.level.blocks.length * this.level.blockWidth - this.frameWidth - 1;"."<br/>"."
        if (this.x > context.canvas.width - this.frameWidth + xScroll -  this.screenBorder)"."<br/>"."
            g_GameObjectManager.xScroll = this.x - (context.canvas.width - this.frameWidth -  this.screenBorder);"."<br/>"."
        // modify the xScroll value to keep the player on the screen"."<br/>"."
        if (this.x < 0)"."<br/>"."
            this.x = 0;"."<br/>"."
        if (this.x -  this.screenBorder < xScroll)"."<br/>"."
            g_GameObjectManager.xScroll = this.x - this.screenBorder;"."<br/>"."
"."<br/>"."
        // if the player is jumping or falling, move along the sine wave"."<br/>"."
        if (!this.grounded)"."<br/>"."
        {"."<br/>"."
            // the last position on the sine wave"."<br/>"."
            var lastHeight = this.jumpSinWavePos;"."<br/>"."
            // the new position on the sine wave"."<br/>"."
            this.jumpSinWavePos += this.jumpSinWaveSpeed * dt;"."<br/>"."
"."<br/>"."
            // we have fallen off the bottom of the sine wave, so continue falling"."<br/>"."
            // at a predetermined speed"."<br/>"."
            if (this.jumpSinWavePos >= Math.PI)"."<br/>"."
                 this.y += this.jumpHeight / this.jumpHangTime * this.fallMultiplyer * dt;"."<br/>"."
            // otherwise move along the sine wave"."<br/>"."
            else"."<br/>"."
                this.y -= (Math.sin(this.jumpSinWavePos) - Math.sin(lastHeight)) * this.jumpHeight;"."<br/>"."
        }"."<br/>"."
"."<br/>"."
        // now that the player has had it's y position changed we need to check for a collision"."<br/>"."
        // with the ground below the player. we have to check both the players left and right sides"."<br/>"."
        // for a collision with the ground"."<br/>"."
"."<br/>"."
        // left side"."<br/>"."
        var currentBlock1 = this.level.currentBlock(this.x);"."<br/>"."
        // right side"."<br/>"."
        var currentBlock2 = this.level.currentBlock(this.x + this.frameWidth);"."<br/>"."
        // ground height below the left side"."<br/>"."
        var groundHeight1 = this.level.groundHeight(currentBlock1);"."<br/>"."
        // ground height below the right side"."<br/>"."
        var groundHeight2 = this.level.groundHeight(currentBlock2);"."<br/>"."
        // the heighest point under the player"."<br/>"."
        var maxGroundHeight = groundHeight1 > groundHeight2 ? groundHeight1 : groundHeight2;"."<br/>"."
        // the players height (relaitive to the bottom of the screen"."<br/>"."
        var playerHeight = context.canvas.height - (this.y + this.image.height);"."<br/>"."
"."<br/>"."
        // we have hit the ground"."<br/>"."
        if (maxGroundHeight >= playerHeight)"."<br/>"."
        {"."<br/>"."
            this.y = context.canvas.height - maxGroundHeight - this.image.height;"."<br/>"."
            this.grounded = true;"."<br/>"."
            this.jumpSinWavePos = 0;"."<br/>"."
        }"."<br/>"."
        // otherwise we are falling"."<br/>"."
        else if (this.grounded)"."<br/>"."
        {"."<br/>"."
            this.grounded = false;"."<br/>"."
            // starting falling down the sine wave (i.e. from the top)"."<br/>"."
            this.jumpSinWavePos = this.halfPI;"."<br/>"."
        }"."<br/>"."
    }"."<br/>"."
}"."<br/>"."

Player.prototype = new AnimatedGameObject;"."<br/>"."";
	
}
	
echo $classContent;
?>